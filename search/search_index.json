{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tqdm tqdm means \"progress\" in Arabic (taqadum, \u062a\u0642\u062f\u0651\u0645) and is an abbreviation for \"I love you so much\" in Spanish (te quiero demasiado). Instantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable) , and you're done! from tqdm import tqdm for i in tqdm(range(10000)): ... 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7568/10000 [00:33 00:10, 229.00it/s] trange(N) can be also used as a convenient shortcut for tqdm(xrange(N)) . REPL: ptpython It can also be executed as a module with pipes: $ seq 9999999 | tqdm --unit_scale | wc -l 10.0Mit [00:02, 3.58Mit/s] 9999999 $ 7z a -bd -r backup.7z docs/ | grep Compressing | \\ tqdm --total $(find docs/ -type f | wc -l) --unit files backup.log 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37 00:00, 82.29files/s] Overhead is low -- about 60ns per iteration (80ns with tqdm_gui ), and is unit tested against performance regression. By comparison, the well-established ProgressBar has an 800ns/iter overhead. In addition to its low overhead, tqdm uses smart algorithms to predict the remaining time and to skip unnecessary iteration displays, which allows for a negligible overhead in most cases. tqdm works on any platform (Linux, Windows, Mac, FreeBSD, NetBSD, Solaris/SunOS), in any console or in a GUI, and is also friendly with IPython/Jupyter notebooks. tqdm does not require any dependencies (not even curses !), just Python and an environment supporting carriage return \\r and line feed \\n control characters.","title":"Home"},{"location":"#tqdm","text":"tqdm means \"progress\" in Arabic (taqadum, \u062a\u0642\u062f\u0651\u0645) and is an abbreviation for \"I love you so much\" in Spanish (te quiero demasiado). Instantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable) , and you're done! from tqdm import tqdm for i in tqdm(range(10000)): ... 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7568/10000 [00:33 00:10, 229.00it/s] trange(N) can be also used as a convenient shortcut for tqdm(xrange(N)) . REPL: ptpython It can also be executed as a module with pipes: $ seq 9999999 | tqdm --unit_scale | wc -l 10.0Mit [00:02, 3.58Mit/s] 9999999 $ 7z a -bd -r backup.7z docs/ | grep Compressing | \\ tqdm --total $(find docs/ -type f | wc -l) --unit files backup.log 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37 00:00, 82.29files/s] Overhead is low -- about 60ns per iteration (80ns with tqdm_gui ), and is unit tested against performance regression. By comparison, the well-established ProgressBar has an 800ns/iter overhead. In addition to its low overhead, tqdm uses smart algorithms to predict the remaining time and to skip unnecessary iteration displays, which allows for a negligible overhead in most cases. tqdm works on any platform (Linux, Windows, Mac, FreeBSD, NetBSD, Solaris/SunOS), in any console or in a GUI, and is also friendly with IPython/Jupyter notebooks. tqdm does not require any dependencies (not even curses !), just Python and an environment supporting carriage return \\r and line feed \\n control characters.","title":"tqdm"},{"location":"contributing/","text":"HOW TO CONTRIBUTE TO TQDM This file describes how to contribute changes to the project, and upload released to the pypi repository. Most of the management commands have been directly placed inside the Makefile: make [ alias ] # on UNIX-like environments python setup.py make [ alias ] # if make is unavailable Use the alias help (or leave blank) to list all available aliases. HOW TO COMMIT CONTRIBUTIONS Contributions to the project are made using the \"Fork Pull\" model. The typical steps would be: create an account on github fork tqdm make a local clone: git clone https://github.com/your_account/tqdm.git make changes on the local copy test (see below) and commit changes git commit -a -m \"my message\" push to your github account: git push origin create a Pull Request (PR) from your github fork (go to your fork's webpage and click on \"Pull Request.\" You can then add a message to describe your proposal.) TESTING To test functionality (such as before submitting a Pull Request), there are a number of unit tests. Standard unit tests The standard way to run the tests: install tox cd to the root of the tqdm directory (in the same folder as this file) run the following command: [python setup.py] make test # or: tox --skip-missing-interpreters This will build the module and run the tests in a virtual environment. Errors and coverage rates will be output to the console/log. (Ignore missing interpreters errors - these are due to the local machine missing certain versions of Python.) Note: to install all versions of the Python interpreter that are specified in tox.ini , you can use MiniConda to install a minimal setup. You must also make sure that each distribution has an alias to call the Python interpreter: python27 for Python 2.7's interpreter, python32 for Python 3.2's, etc. Alternative unit tests with Nose Alternatively, use nose to run the tests just for the current Python version: install nose and flake8 run the following command: [python setup.py] make alltests MANAGE A NEW RELEASE This section is intended for the project's maintainers and describes how to build and upload a new release. Once again, [python setup.py] make [ alias ] will help. SEMANTIC VERSIONING The tqdm repository managers should: regularly bump the version number in the file _version.py follow the Semantic Versioning convention take care of this (instead of users) to avoid PR conflicts solely due to the version file bumping Note: tools can be used to automate this process, such as bumpversion or python-semanticversion . CHECKING SETUP.PY To check that the setup.py file is compliant with PyPi requirements (e.g. version number; reStructuredText in README.rst) use: [python setup.py] make testsetup To upload just metadata (including overwriting mistakenly uploaded metadata) to PyPi, use: [python setup.py] make pypimeta MERGING PULL REQUESTS This section describes how to cleanly merge PRs. 1 Rebase From your project repository, merge and test (replace pr-branch-name as appropriate): git fetch origin git checkout -b pr-branch-name origin/pr-branch-name git rebase master If there are conflicts: git mergetool git rebase --continue 2 Push Update branch with the rebased history: git push origin pr-branch-name --force Non maintainers can stop here. Note: NEVER just git push --force (this will push all local branches, overwriting remotes). 3 Merge git checkout master git merge --no-ff pr-branch-name 4 Test [python setup.py] make alltests 5 Version Modify tqdm/_version.py and ammend the last (merge) commit: git add tqdm/_version.py git commit --amend # Add + bump version in the commit message 6 Push to master git push origin master BUILDING A RELEASE AND UPLOADING TO PYPI Formally publishing requires additional steps: testing and tagging. Test ensure that all online CI tests have passed check setup.py and MANIFEST.in - which define the packaging process and info that will be uploaded to pypi - using [python setup.py] make installdev Tag ensure the version has been bumped, committed and tagged. The tag format is v{major}.{minor}.{patch} , for example: v4.4.1 . The current commit's tag is used in the version checking process. If the current commit is not tagged appropriately, the version will display as v{major}.{minor}.{patch}-{commit_hash} . Upload Build tqdm into a distributable python package: [python setup.py] make build This will generate several builds in the dist/ folder. On non-windows machines the windows exe installer may fail to build. This is normal. Finally, upload everything to pypi. This can be done easily using the twine module: [python setup.py] make pypi Also, the new release can (should) be added to github by creating a new release from the web interface; uploading packages from the dist/ folder created by [python setup.py] make build . The wiki can be automatically updated with github release notes by running make within the wiki repository. Notes you can also test on the pypi test servers testpypi.python.org/pypi before the real deployment in case of a mistake, you can delete an uploaded release on pypi, but you cannot re-upload another with the same version number in case of a mistake in the metadata on pypi (e.g. bad README), updating just the metadata is possible: [python setup.py] make pypimeta UPDATING GH-PAGES The most important file is README.rst, which sould always be kept up-to-date and in sync with the in-line source documentation. This will affect all of the following: The main repository site which automatically serves the latest README.rst as well as links to all of github's features. This is the preferred online referral link for tqdm. The PyPi mirror which automatically serves the latest release built from README.rst as well as links to past releases. Many external web crawlers. Additionally (less maintained), there exists: A wiki which is publicly editable. The gh-pages project which is built from the gh-pages branch , which is built using asv . The gh-pages root which is built from a separate outdated github.io repo . QUICK DEV SUMMARY For expereinced devs, once happy with local master: bump version in tqdm/_version.py test ( [python setup.py] make alltests ) git commit [--amend] # -m \"bump version\" git push wait for tests to pass a) in case of failure, fix and go back to (2) git tag vM.m.p git push --tags [python setup.py] make distclean [python setup.py] make build [python setup.py] make pypi","title":"Contributing"},{"location":"contributing/#how-to-contribute-to-tqdm","text":"This file describes how to contribute changes to the project, and upload released to the pypi repository. Most of the management commands have been directly placed inside the Makefile: make [ alias ] # on UNIX-like environments python setup.py make [ alias ] # if make is unavailable Use the alias help (or leave blank) to list all available aliases.","title":"HOW TO CONTRIBUTE TO TQDM"},{"location":"contributing/#how-to-commit-contributions","text":"Contributions to the project are made using the \"Fork Pull\" model. The typical steps would be: create an account on github fork tqdm make a local clone: git clone https://github.com/your_account/tqdm.git make changes on the local copy test (see below) and commit changes git commit -a -m \"my message\" push to your github account: git push origin create a Pull Request (PR) from your github fork (go to your fork's webpage and click on \"Pull Request.\" You can then add a message to describe your proposal.)","title":"HOW TO COMMIT CONTRIBUTIONS"},{"location":"contributing/#testing","text":"To test functionality (such as before submitting a Pull Request), there are a number of unit tests.","title":"TESTING"},{"location":"contributing/#standard-unit-tests","text":"The standard way to run the tests: install tox cd to the root of the tqdm directory (in the same folder as this file) run the following command: [python setup.py] make test # or: tox --skip-missing-interpreters This will build the module and run the tests in a virtual environment. Errors and coverage rates will be output to the console/log. (Ignore missing interpreters errors - these are due to the local machine missing certain versions of Python.) Note: to install all versions of the Python interpreter that are specified in tox.ini , you can use MiniConda to install a minimal setup. You must also make sure that each distribution has an alias to call the Python interpreter: python27 for Python 2.7's interpreter, python32 for Python 3.2's, etc.","title":"Standard unit tests"},{"location":"contributing/#alternative-unit-tests-with-nose","text":"Alternatively, use nose to run the tests just for the current Python version: install nose and flake8 run the following command: [python setup.py] make alltests","title":"Alternative unit tests with Nose"},{"location":"contributing/#manage-a-new-release","text":"This section is intended for the project's maintainers and describes how to build and upload a new release. Once again, [python setup.py] make [ alias ] will help.","title":"MANAGE A NEW RELEASE"},{"location":"contributing/#semantic-versioning","text":"The tqdm repository managers should: regularly bump the version number in the file _version.py follow the Semantic Versioning convention take care of this (instead of users) to avoid PR conflicts solely due to the version file bumping Note: tools can be used to automate this process, such as bumpversion or python-semanticversion .","title":"SEMANTIC VERSIONING"},{"location":"contributing/#checking-setuppy","text":"To check that the setup.py file is compliant with PyPi requirements (e.g. version number; reStructuredText in README.rst) use: [python setup.py] make testsetup To upload just metadata (including overwriting mistakenly uploaded metadata) to PyPi, use: [python setup.py] make pypimeta","title":"CHECKING SETUP.PY"},{"location":"contributing/#merging-pull-requests","text":"This section describes how to cleanly merge PRs.","title":"MERGING PULL REQUESTS"},{"location":"contributing/#1-rebase","text":"From your project repository, merge and test (replace pr-branch-name as appropriate): git fetch origin git checkout -b pr-branch-name origin/pr-branch-name git rebase master If there are conflicts: git mergetool git rebase --continue","title":"1 Rebase"},{"location":"contributing/#2-push","text":"Update branch with the rebased history: git push origin pr-branch-name --force Non maintainers can stop here. Note: NEVER just git push --force (this will push all local branches, overwriting remotes).","title":"2 Push"},{"location":"contributing/#3-merge","text":"git checkout master git merge --no-ff pr-branch-name","title":"3 Merge"},{"location":"contributing/#4-test","text":"[python setup.py] make alltests","title":"4 Test"},{"location":"contributing/#5-version","text":"Modify tqdm/_version.py and ammend the last (merge) commit: git add tqdm/_version.py git commit --amend # Add + bump version in the commit message","title":"5 Version"},{"location":"contributing/#6-push-to-master","text":"git push origin master","title":"6 Push to master"},{"location":"contributing/#building-a-release-and-uploading-to-pypi","text":"Formally publishing requires additional steps: testing and tagging.","title":"BUILDING A RELEASE AND UPLOADING TO PYPI"},{"location":"contributing/#test","text":"ensure that all online CI tests have passed check setup.py and MANIFEST.in - which define the packaging process and info that will be uploaded to pypi - using [python setup.py] make installdev","title":"Test"},{"location":"contributing/#tag","text":"ensure the version has been bumped, committed and tagged. The tag format is v{major}.{minor}.{patch} , for example: v4.4.1 . The current commit's tag is used in the version checking process. If the current commit is not tagged appropriately, the version will display as v{major}.{minor}.{patch}-{commit_hash} .","title":"Tag"},{"location":"contributing/#upload","text":"Build tqdm into a distributable python package: [python setup.py] make build This will generate several builds in the dist/ folder. On non-windows machines the windows exe installer may fail to build. This is normal. Finally, upload everything to pypi. This can be done easily using the twine module: [python setup.py] make pypi Also, the new release can (should) be added to github by creating a new release from the web interface; uploading packages from the dist/ folder created by [python setup.py] make build . The wiki can be automatically updated with github release notes by running make within the wiki repository.","title":"Upload"},{"location":"contributing/#notes","text":"you can also test on the pypi test servers testpypi.python.org/pypi before the real deployment in case of a mistake, you can delete an uploaded release on pypi, but you cannot re-upload another with the same version number in case of a mistake in the metadata on pypi (e.g. bad README), updating just the metadata is possible: [python setup.py] make pypimeta","title":"Notes"},{"location":"contributing/#updating-gh-pages","text":"The most important file is README.rst, which sould always be kept up-to-date and in sync with the in-line source documentation. This will affect all of the following: The main repository site which automatically serves the latest README.rst as well as links to all of github's features. This is the preferred online referral link for tqdm. The PyPi mirror which automatically serves the latest release built from README.rst as well as links to past releases. Many external web crawlers. Additionally (less maintained), there exists: A wiki which is publicly editable. The gh-pages project which is built from the gh-pages branch , which is built using asv . The gh-pages root which is built from a separate outdated github.io repo .","title":"UPDATING GH-PAGES"},{"location":"contributing/#quick-dev-summary","text":"For expereinced devs, once happy with local master: bump version in tqdm/_version.py test ( [python setup.py] make alltests ) git commit [--amend] # -m \"bump version\" git push wait for tests to pass a) in case of failure, fix and go back to (2) git tag vM.m.p git push --tags [python setup.py] make distclean [python setup.py] make build [python setup.py] make pypi","title":"QUICK DEV SUMMARY"},{"location":"licence/","text":"tqdm is a product of collaborative work. Unless otherwise stated, all authors (see commit logs) retain copyright for their respective work, and release the work under the MIT licence (text below). Exceptions or notable authors are listed below in reverse chronological order: files: * MPLv2.0 2015-2018 (c) Casper da Costa-Luis casperdcl . files: tqdm/_tqdm.py MIT 2016 (c) PR #96 on behalf of Google Inc. files: tqdm/_tqdm.py setup.py README.rst MANIFEST.in .gitignore MIT 2013 (c) Noam Yorav-Raphael, original author. Mozilla Public Licence (MPL) v. 2.0 - Exhibit A This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/. MIT License (MIT) Copyright (c) 2013 noamraph Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"licence/#mozilla-public-licence-mpl-v-20-exhibit-a","text":"This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.","title":"Mozilla Public Licence (MPL) v. 2.0 - Exhibit A"},{"location":"licence/#mit-license-mit","text":"Copyright (c) 2013 noamraph Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License (MIT)"},{"location":"tqdm/TMonitor/","text":"TMonitor TMonitor(self, tqdm_cls, sleep_interval) Monitoring thread for tqdm bars. Monitors if tqdm bars are taking too much time to display and readjusts miniters automatically if necessary. Parameters tqdm_cls : class tqdm class to use (can be core tqdm or a submodule). sleep_interval : fload Time to sleep between monitoring checks.","title":"tqdm.TMonitor"},{"location":"tqdm/TMonitor/#tmonitor","text":"","title":"TMonitor"},{"location":"tqdm/shortcuts/","text":"trange trange(*args, **kwargs) A shortcut for tqdm(xrange( args), *kwargs). On Python3+ range is used instead of xrange. tgrange tgrange(*args, **kwargs) A shortcut for tqdm_gui(xrange( args), *kwargs). On Python3+ range is used instead of xrange. tnrange tnrange(*args, **kwargs) A shortcut for tqdm_notebook(xrange( args), *kwargs). On Python3+ range is used instead of xrange. tqdm_pandas tqdm_pandas(tclass, *targs, **tkwargs) Registers the given tqdm instance with pandas.core.groupby.DataFrameGroupBy.progress_apply . It will even close() the tqdm instance upon completion. Parameters tclass : tqdm class you want to use (eg, tqdm, tqdm_notebook, etc) targs and tkwargs : arguments for the tqdm instance Examples import pandas as pd import numpy as np from tqdm import tqdm, tqdm_pandas df = pd.DataFrame(np.random.randint(0, 100, (100000, 6))) tqdm_pandas(tqdm, leave=True) # can use tqdm_gui, optional kwargs, etc # Now you can use `progress_apply` instead of `apply` df.groupby(0).progress_apply(lambda x: x**2) References https://stackoverflow.com/questions/18603270/ progress-indicator-during-pandas-operations-python","title":"Shortcuts"},{"location":"tqdm/shortcuts/#trange","text":"","title":"trange"},{"location":"tqdm/shortcuts/#tgrange","text":"","title":"tgrange"},{"location":"tqdm/shortcuts/#tnrange","text":"","title":"tnrange"},{"location":"tqdm/shortcuts/#tqdm_pandas","text":"","title":"tqdm_pandas"},{"location":"tqdm/tqdm/","text":"tqdm tqdm(self, iterable=None, desc=None, total=None, leave=True, file=None, ncols=None, mininterval=0.1, maxinterval=10.0, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, dynamic_ncols=False, smoothing=0.3, bar_format=None, initial=0, position=None, postfix=None, unit_divisor=1000, gui=False, **kwargs) Decorate an iterable object, returning an iterator which acts exactly like the original iterable, but prints a dynamically updating progressbar every time a value is requested. __init__ tqdm.__init__(self, iterable=None, desc=None, total=None, leave=True, file=None, ncols=None, mininterval=0.1, maxinterval=10.0, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, dynamic_ncols=False, smoothing=0.3, bar_format=None, initial=0, position=None, postfix=None, unit_divisor=1000, gui=False, **kwargs) Parameters iterable : iterable, optional Iterable to decorate with a progressbar. Leave blank to manually manage the updates. desc : str, optional Prefix for the progressbar. total : int, optional The number of expected iterations. If unspecified, len(iterable) is used if possible. As a last resort, only basic progress statistics are displayed (no ETA, no progressbar). If gui is True and this parameter needs subsequent updating, specify an initial arbitrary large positive integer, e.g. int(9e9). leave : bool, optional If [default: True], keeps all traces of the progressbar upon termination of iteration. file : io.TextIOWrapper or io.StringIO , optional Specifies where to output the progress messages (default: sys.stderr). Uses file.write(str) and file.flush() methods. ncols : int, optional The width of the entire output message. If specified, dynamically resizes the progressbar to stay within this bound. If unspecified, attempts to use environment width. The fallback is a meter width of 10 and no limit for the counter and statistics. If 0, will not print any meter (only stats). mininterval : float, optional Minimum progress display update interval, in seconds [default: 0.1]. maxinterval : float, optional Maximum progress display update interval, in seconds [default: 10]. Automatically adjusts miniters to correspond to mininterval after long display update lag. Only works if dynamic_miniters or monitor thread is enabled. miniters : int, optional Minimum progress display update interval, in iterations. If 0 and dynamic_miniters , will automatically adjust to equal mininterval (more CPU efficient, good for tight loops). If 0, will skip display of specified number of iterations. Tweak this and mininterval to get very efficient loops. If your progress is erratic with both fast and slow iterations (network, skipping items, etc) you should set miniters=1. ascii : bool, optional If unspecified or False, use unicode (smooth blocks) to fill the meter. The fallback is to use ASCII characters 1-9 # . disable : bool, optional Whether to disable the entire progressbar wrapper [default: False]. If set to None, disable on non-TTY. unit : str, optional String that will be used to define the unit of each iteration [default: it]. unit_scale : bool or int or float, optional If 1 or True, the number of iterations will be reduced/scaled automatically and a metric prefix following the International System of Units standard will be added (kilo, mega, etc.) [default: False]. If any other non-zero number, will scale total and n . dynamic_ncols : bool, optional If set, constantly alters ncols to the environment (allowing for window resizes) [default: False]. smoothing : float, optional Exponential moving average smoothing factor for speed estimates (ignored in GUI mode). Ranges from 0 (average speed) to 1 (current/instantaneous speed) [default: 0.3]. bar_format : str, optional Specify a custom bar string formatting. May impact performance. [default: '{l_bar}{bar}{r_bar}'], where l_bar='{desc}: {percentage:3.0f}%|' and r_bar='| {n_fmt}/{total_fmt} [{elapsed} {remaining}, ' '{rate_fmt}{postfix}]' Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt, percentage, rate, rate_fmt, rate_noinv, rate_noinv_fmt, rate_inv, rate_inv_fmt, elapsed, remaining, desc, postfix. Note that a trailing \": \" is automatically removed after {desc} if the latter is empty. initial : int, optional The initial counter value. Useful when restarting a progress bar [default: 0]. position : int, optional Specify the line offset to print this bar (starting from 0) Automatic if unspecified. Useful to manage multiple bars at once (eg, from threads). postfix : dict or *, optional Specify additional stats to display at the end of the bar. Calls set_postfix(**postfix) if possible (dict). unit_divisor : float, optional [default: 1000], ignored unless unit_scale is True. gui : bool, optional WARNING: internal parameter - do not use. Use tqdm_gui(...) instead. If set, will attempt to use matplotlib animations for a graphical output [default: False]. Returns out : decorated iterator. update tqdm.update(self, n=1) Manually update the progress bar, useful for streams such as reading files. E.g.: t = tqdm(total=filesize) # Initialise for current_buffer in stream: ... ... ... t.update(len(current_buffer)) t.close() The last line is highly recommended, but possibly not necessary if t.update() will be called in such a way that filesize will be exactly reached and printed. Parameters n : int, optional Increment to add to the internal counter of iterations [default: 1]. close tqdm.close(self) Cleanup and (if leave=False) close the progressbar. refresh tqdm.refresh(self, nolock=False) Force refresh the display of this bar write tqdm.write(cls, s, file=None, end='\\n', nolock=False) Print a message via tqdm (without overlap with bars) set_description tqdm.set_description(self, desc=None, refresh=True) Set/modify description of the progress bar. Parameters desc : str, optional refresh : bool, optional Forces refresh [default: True]. set_description_str tqdm.set_description_str(self, desc=None, refresh=True) Set/modify description without ': ' appended. set_postfix tqdm.set_postfix(self, ordered_dict=None, refresh=True, **kwargs) Set/modify postfix (additional stats) with automatic formatting based on datatype. Parameters ordered_dict : dict or OrderedDict, optional refresh : bool, optional Forces refresh [default: True]. kwargs : dict, optional set_postfix_str tqdm.set_postfix_str(self, s='', refresh=True) Postfix without dictionary expansion, similar to prefix handling. clear tqdm.clear(self, nolock=False) Clear current bar display unpause tqdm.unpause(self) Restart tqdm timer from last print time. external_write_mode tqdm.external_write_mode(*args, **kwds) Disable tqdm within context and refresh tqdm when exits. Useful when writing to standard output stream set_lock tqdm.set_lock(cls, lock) get_lock tqdm.get_lock(cls) pandas tqdm.pandas(tclass, *targs, **tkwargs) Registers the given tqdm class with pandas.core. ( frame.DataFrame | series.Series | groupby.DataFrameGroupBy | groupby.SeriesGroupBy ).progress_apply A new instance will be create every time progress_apply is called, and each instance will automatically close() upon completion. Parameters targs, tkwargs : arguments for the tqdm instance Examples import pandas as pd import numpy as np from tqdm import tqdm, tqdm_gui df = pd.DataFrame(np.random.randint(0, 100, (100000, 6))) tqdm.pandas(ncols=50) # can use tqdm_gui, optional kwargs, etc # Now you can use `progress_apply` instead of `apply` df.groupby(0).progress_apply(lambda x: x**2) References https://stackoverflow.com/questions/18603270/ progress-indicator-during-pandas-operations-python format_interval tqdm.format_interval(t) Formats a number of seconds as a clock time, [H:]MM:SS Parameters t : int Number of seconds. Returns out : str [H:]MM:SS format_sizeof tqdm.format_sizeof(num, suffix='', divisor=1000) Formats a number (greater than unity) with SI Order of Magnitude prefixes. Parameters num : float Number ( = 1) to format. suffix : str, optional Post-postfix [default: '']. divisor : float, optionl Divisor between prefixes [default: 1000]. Returns out : str Number with Order of Magnitude SI unit postfix. format_meter tqdm.format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None, postfix=None, unit_divisor=1000) Return a string-based progress bar given some parameters Parameters n : int Number of finished iterations. total : int The expected total number of iterations. If meaningless (), only basic progress statistics are displayed (no ETA). elapsed : float Number of seconds passed since start. ncols : int, optional The width of the entire output message. If specified, dynamically resizes the progress meter to stay within this bound [default: None]. The fallback meter width is 10 for the progress bar + no limit for the iterations counter and statistics. If 0, will not print any meter (only stats). prefix : str, optional Prefix message (included in total width) [default: '']. Use as {desc} in bar_format string. ascii : bool, optional If not set, use unicode (smooth blocks) to fill the meter [default: False]. The fallback is to use ASCII characters (1-9 #). unit : str, optional The iteration unit [default: 'it']. unit_scale : bool or int or float, optional If 1 or True, the number of iterations will be printed with an appropriate SI metric prefix (k = 10^3, M = 10^6, etc.) [default: False]. If any other non-zero number, will scale total and n . rate : float, optional Manual override for iteration rate. If [default: None], uses n/elapsed. bar_format : str, optional Specify a custom bar string formatting. May impact performance. [default: '{l_bar}{bar}{r_bar}'], where l_bar='{desc}: {percentage:3.0f}%|' and r_bar='| {n_fmt}/{total_fmt} [{elapsed} {remaining}, ' '{rate_fmt}{postfix}]' Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt, percentage, rate, rate_fmt, rate_noinv, rate_noinv_fmt, rate_inv, rate_inv_fmt, elapsed, remaining, desc, postfix. Note that a trailing \": \" is automatically removed after {desc} if the latter is empty. postfix : *, optional Similar to prefix , but placed at the end (e.g. for additional stats). Note: postfix is usually a string (not a dict) for this method, and will if possible be set to postfix = ', ' + postfix. However other types are supported (#382). unit_divisor : float, optional [default: 1000], ignored unless unit_scale is True. Returns out : Formatted meter and stats, ready to display. status_printer tqdm.status_printer(file) Manage the printing and in-place updating of a line of characters. Note that if the string is longer than a line, then in-place updating may not work (it will print a new line at each refresh). Comparable Comparable(self) Assumes child has self._comparable attr/@property","title":"tqdm.tqdm"},{"location":"tqdm/tqdm/#tqdm","text":"","title":"tqdm"},{"location":"tqdm/tqdm/#9595init9595","text":"","title":"__init__"},{"location":"tqdm/tqdm/#update","text":"","title":"update"},{"location":"tqdm/tqdm/#close","text":"","title":"close"},{"location":"tqdm/tqdm/#refresh","text":"","title":"refresh"},{"location":"tqdm/tqdm/#write","text":"","title":"write"},{"location":"tqdm/tqdm/#set_description","text":"","title":"set_description"},{"location":"tqdm/tqdm/#set_description_str","text":"","title":"set_description_str"},{"location":"tqdm/tqdm/#set_postfix","text":"","title":"set_postfix"},{"location":"tqdm/tqdm/#set_postfix_str","text":"","title":"set_postfix_str"},{"location":"tqdm/tqdm/#clear","text":"","title":"clear"},{"location":"tqdm/tqdm/#unpause","text":"","title":"unpause"},{"location":"tqdm/tqdm/#external_write_mode","text":"","title":"external_write_mode"},{"location":"tqdm/tqdm/#set_lock","text":"","title":"set_lock"},{"location":"tqdm/tqdm/#get_lock","text":"","title":"get_lock"},{"location":"tqdm/tqdm/#pandas","text":"","title":"pandas"},{"location":"tqdm/tqdm/#format_interval","text":"","title":"format_interval"},{"location":"tqdm/tqdm/#format_sizeof","text":"","title":"format_sizeof"},{"location":"tqdm/tqdm/#format_meter","text":"","title":"format_meter"},{"location":"tqdm/tqdm/#status_printer","text":"","title":"status_printer"},{"location":"tqdm/tqdm/#comparable","text":"","title":"Comparable"},{"location":"tqdm/tqdm_gui/","text":"tqdm_gui tqdm_gui(self, *args, **kwargs) Experimental GUI version of tqdm!","title":"tqdm.tqdm_gui"},{"location":"tqdm/tqdm_gui/#tqdm_gui","text":"","title":"tqdm_gui"},{"location":"tqdm/tqdm_notebook/","text":"tqdm_notebook tqdm_notebook(self, *args, **kwargs) Experimental IPython/Jupyter Notebook widget using tqdm! status_printer tqdm_notebook.status_printer(_, total=None, desc=None, ncols=None) Manage the printing of an IPython/Jupyter Notebook progress bar widget. set_description tqdm_notebook.set_description(self, desc=None, **_) Set/modify description of the progress bar. Parameters desc : str, optional","title":"tqdm.tqdm_notebook"},{"location":"tqdm/tqdm_notebook/#tqdm_notebook","text":"","title":"tqdm_notebook"},{"location":"tqdm/warnings/","text":"TqdmTypeError TqdmTypeError(self) TqdmKeyError TqdmKeyError(self) TqdmWarning TqdmWarning(self, msg, fp_write=None, *a, **k) base class for all tqdm warnings. Used for non-external-code-breaking errors, such as garbled printing. TqdmSynchronisationWarning TqdmSynchronisationWarning(self) tqdm multi-thread/-process errors which may cause incorrect nesting but otherwise no adverse effects TqdmDeprecationWarning TqdmDeprecationWarning(self, msg, fp_write=None, *a, **k) TqdmExperimentalWarning TqdmExperimentalWarning(self, msg, fp_write=None, *a, **k) beta feature, unstable API and behaviour TqdmMonitorWarning TqdmMonitorWarning(self, msg, fp_write=None, *a, **k) tqdm monitor errors which do not affect external functionality","title":"Warnings and Exceptions"},{"location":"tqdm/warnings/#tqdmtypeerror","text":"","title":"TqdmTypeError"},{"location":"tqdm/warnings/#tqdmkeyerror","text":"","title":"TqdmKeyError"},{"location":"tqdm/warnings/#tqdmwarning","text":"","title":"TqdmWarning"},{"location":"tqdm/warnings/#tqdmsynchronisationwarning","text":"","title":"TqdmSynchronisationWarning"},{"location":"tqdm/warnings/#tqdmdeprecationwarning","text":"","title":"TqdmDeprecationWarning"},{"location":"tqdm/warnings/#tqdmexperimentalwarning","text":"","title":"TqdmExperimentalWarning"},{"location":"tqdm/warnings/#tqdmmonitorwarning","text":"","title":"TqdmMonitorWarning"}]}